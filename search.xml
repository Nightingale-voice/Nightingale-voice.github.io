<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/01/hello-world/"/>
      <url>/2021/12/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA安装</title>
      <link href="/2021/12/01/IDEA%E5%AE%89%E8%A3%85/"/>
      <url>/2021/12/01/IDEA%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA安装"><a href="#IDEA安装" class="headerlink" title="IDEA安装"></a>IDEA安装</h1><h2 id="IDEA的相关介绍"><a href="#IDEA的相关介绍" class="headerlink" title="IDEA的相关介绍"></a>IDEA的相关介绍</h2><h3 id="1-什么是IDE"><a href="#1-什么是IDE" class="headerlink" title="1.什么是IDE"></a>1.什么是IDE</h3><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067">编译器</a>、<a href="https://baike.baidu.com/item/%E8%B0%83%E8%AF%95%E5%99%A8/3351943">调试器</a>和<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/3352324">图形用户界面</a>等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767">微软</a>的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。</p><p>较早期程序设计的各个阶段都要用不同的软件来进行处理,如先用字处理软件编辑源程序，然后用链接程序进行函数、模块连接,再用<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E7%A8%8B%E5%BA%8F">编译程序</a>进行<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91">编译</a>,开发者必须在几种软件间来回切换操作。编程开发软件将编辑、编译、<a href="https://baike.baidu.com/item/%E8%B0%83%E8%AF%95">调试</a>等功能集成在一个<a href="https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83">桌面环境</a>中,这样就大大方便了用户。</p><p>例如，<a href="https://baike.baidu.com/item/BASIC%E8%AF%AD%E8%A8%80">BASIC语言</a>在微软Office软件中可以使用，可以在微软Word文档中编写WordBasic程序。IDE为用户使用Visual Basic、Java和PowerBuilder等现代编程语言提供了方便。　不同的技术体系有不同的IDE。比如Visual Studio .NET可以称为C++、VB、C#等语言的集成开发环境，所以Visual Studio .NET可以叫做IDE。同样，Borland的JBuilder也是一个IDE，它是Java的IDE。Eclipse也是一个IDE，可以用于开发Java语言和C++语言。</p><h3 id="2-IDEA介绍"><a href="#2-IDEA介绍" class="headerlink" title="2.IDEA介绍"></a>2.IDEA介绍</h3><p>IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE支持、各类版本工具(<a href="https://baike.baidu.com/item/git/12647237">git</a>、<a href="https://baike.baidu.com/item/svn/3311103">svn</a>等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是<a href="https://baike.baidu.com/item/JetBrains/7502758">JetBrains</a>公司的产品，这家公司总部位于<a href="https://baike.baidu.com/item/%E6%8D%B7%E5%85%8B%E5%85%B1%E5%92%8C%E5%9B%BD/418555">捷克共和国</a>的首都<a href="https://baike.baidu.com/item/%E5%B8%83%E6%8B%89%E6%A0%BC/632">布拉格</a>，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Java,Kotlin等少数语言。</p><h3 id="3-IDEA安装官网"><a href="#3-IDEA安装官网" class="headerlink" title="3.IDEA安装官网"></a>3.IDEA安装官网</h3><p>IDEA官网: <a href="https://www.jetbrains.com/">https://www.jetbrains.com/</a></p><h2 id="IDEA安装教程"><a href="#IDEA安装教程" class="headerlink" title="IDEA安装教程"></a>IDEA安装教程</h2><p>1.首先找到 <a href="https://www.jetbrains.com/%E5%AE%98%E6%96%B9%E7%BD%91%E7%AB%99%EF%BC%8C%E4%B8%80%E8%88%AC%E6%83%85%E5%86%B5%E4%B8%8B%E9%83%BD%E6%98%AF%E7%BD%91%E7%AB%99%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84NO.1%EF%BC%8C%E5%BE%88%E9%86%92%E7%9B%AE">https://www.jetbrains.com/官方网站，一般情况下都是网站关键字的NO.1，很醒目</a></p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\idea安装\image-20210318192316246.png" alt="image-20210318192316246"></p><p>2.找到idea安装图标，点进去就会看到如下页面</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\idea安装\image-20210318192615528.png" alt="image-20210318192615528"></p><p>我们可以看到右上方会有一个“Download”按钮，点击即可安装操作</p><p><img src="C:\Users\86181\AppData\Roaming\Typora\typora-user-images\image-20210318192805567.png" alt="image-20210318192805567"></p><p>idea的下载分为三个区块，你的电脑操作系统属于哪个系统就下载哪个系统，同时在系统栏目以下还分为两个小区块，分别为旗舰版和社区版，旗舰版一般情况下都会收费（支付宝，微信均可），社区版则是完全免费的，只不过会有相当多的功能会被阉割或者锁定，当然，如果你对目标仅仅只是Java方面的学习时，仅仅只是社区版也绝对会满足你大多数情况下的要求，直至你完全学会Java之前，IDEA社区版绝对够用，所以这里还是推荐使用社区版，当然，如果经济实力允许的话，旗舰版会是更优秀的选择。</p><p>再点击安装或者购买以后，接下来就是完全意义上的傻瓜教程——————</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\idea安装\image-20210318193501343.png" alt="image-20210318193501343"></p><p>它会告知你“欢迎使用IDEA软件”，然后就如同其他的软件一样的，选择相关的安装路径，选择相关的安装语言，选择是否在桌面上创建快捷方式等等等等，再跟着它的安装教程之后，你的桌面上就会出现一款IDEA的软件图标了（记得记录安装路径）</p><h2 id="第一次使用IDEA敲出“Hello-World！”"><a href="#第一次使用IDEA敲出“Hello-World！”" class="headerlink" title="第一次使用IDEA敲出“Hello World！”"></a>第一次使用IDEA敲出“Hello World！”</h2><p>在第一次进入IDEA之后，你会发现以下的界面</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\idea安装\image-20210318193924682.png" alt="image-20210318193924682"></p><p>你不需要知道他们是什么作用，你只需要点进第一个栏目创建属于你的第一个项目即可</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\idea安装\image-20210318194040348.png" alt="image-20210318194040348">正式进入IDEA之后，你会看到上述页面，最上面的下拉菜单是配置变量环节，如果你已经按照上次的相关操作进行配置之后，它会自动的锁定相关的环境变量，如果没有自动查找到，那你就点进去手动到安装地址中去选择环境变量即可</p><p>创建好了初步的环境变量之后，你会看到一下窗口</p><p><img src="C:\Users\86181\AppData\Roaming\Typora\typora-user-images\image-20210318194440930.png" alt="image-20210318194440930"></p><p>在这个页面填写项目名称和项目保存地址，然后next创建任务</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\idea安装\image-20210318194546969.png" alt="image-20210318194546969"></p><p>在src中创建属于你自己的任务，此时就可以开始打代码了</p><p>直接输入“psvm”或者“main”即可立刻创建main方法</p><p>直接使用“sout”创造输出条件，然后在引号之间输入自己对于世界的呐喊</p><p>点击此时在状态栏上的小绿色箭头，正式运行程序</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\idea安装\image-20210318194842652.png" alt="image-20210318194842652"></p><p>在下方的控制台中会立刻显示你的代码的呐喊！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狂神笔记——初入Java世界</title>
      <link href="/2021/12/01/%E7%8B%82%E7%A5%9E%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%88%9D%E5%85%A5Java%E4%B8%96%E7%95%8C/"/>
      <url>/2021/12/01/%E7%8B%82%E7%A5%9E%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%88%9D%E5%85%A5Java%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="狂神笔记——初入Java世界"><a href="#狂神笔记——初入Java世界" class="headerlink" title="狂神笔记——初入Java世界"></a>狂神笔记——初入Java世界</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="代码的作用"><a href="#代码的作用" class="headerlink" title="代码的作用"></a>代码的作用</h3><p>平时我们编写代码，在代码量比较少的时候，我们还可以看懂自己写的，但是当项目结构一旦复杂起来，我们就需要用到注释了。</p><p>注释有助于我们理解代码的用意，有助于我们快速读懂代码。</p><p>注释并不会被执行，是给我们写代码的人看的。</p><p><strong>书写注释是一个非常好的习惯</strong>。（在大公司的应聘中，会用较为规范的行为要求来约束员工，而记得打注释就是最基本的一个程序员的工作素养，<strong>在很多时候在团队协作中具有极其重要的作用</strong>）</p><h3 id="Java中的注释有三种"><a href="#Java中的注释有三种" class="headerlink" title="Java中的注释有三种:"></a>Java中的注释有三种:</h3><p>单行注释（在注释之前写上“//”即可使用，只不过只对单行文字有用，使用较为快捷与方便）</p><p>多行注释（/*  ——*/的方式来注释在两个符号之间的所有文字，可对于多行文字起作用）</p><p>文档注释（在doc文档中会详细进行相关的解释）、</p><h3 id="注意：平时写代码一定要做到随时留注释，随时看注释的好习惯"><a href="#注意：平时写代码一定要做到随时留注释，随时看注释的好习惯" class="headerlink" title="注意：平时写代码一定要做到随时留注释，随时看注释的好习惯"></a><strong>注意：平时写代码一定要做到随时留注释，随时看注释的好习惯</strong></h3><hr><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="关键字（标识符一定不能用到这些关键字）"><a href="#关键字（标识符一定不能用到这些关键字）" class="headerlink" title="关键字（标识符一定不能用到这些关键字）"></a>关键字（标识符一定不能用到这些关键字）</h3><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\数据类型\image-20210318200720120.png" alt="image-20210318200720120"></p><hr><h2 id="标识符如何使用"><a href="#标识符如何使用" class="headerlink" title="标识符如何使用"></a>标识符如何使用</h2><p>标识符多种多样，它们相当于在Java程序中发挥某些作用的变量的名字，但很显然，就像人类的名字必须传自家谱，又或者必须与历史上的某些伟人避讳，这些标识符自然也会有相关的“取名规则”：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//所有的标识符都只能用“A-Z”“a—z”“$“”_“四种类型作为开头字母，否则会报错</span><br><span class="line">//首字母之后可以是任意字母，任何组合，甚至可以是阿拉伯数字</span><br><span class="line">//但是类似于”#“之类的具有特殊意义的符号无论作为首字母还是后续字母都会进行报错，需要注意</span><br><span class="line">//不能使用关键字作为变量名或者是方法名，比如”class“"double""static"</span><br><span class="line">//标识符是大小写敏感的</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\数据类型\image-20210318200927021.png" alt="image-20210318200927021"></p><p>在目前IDEA的开发环境中，作为“名字”使用的标识符，即使是基于中文也是可以进行相关的识别与使用的，但这里并不建议直接使用中文作为相关的标识符，因为由于在以后的Java使用中，避免不了与他人的相关文件的传输，你电脑上可以识别的中文有可能到别人机器上就是一串乱码，兼容性并不强，还有，直接使用中文或许会体现你的家国情怀和它的确通俗易懂，但是吧，总觉得有那么一点low。。。</p><p>平常玩一下搞点事什么的还是可以的jpg</p><p><strong>所有的标识符都只能用“A-Z”“a—z”“$“”_“四种类型作为开头字母，否则会报错</strong>（中文什么的自己搞着玩就行，别真的搞到台面上去，挺丢人的啦啦啦）；</p><p><strong>首字母之后可以是任意字母，任何组合，甚至可以是阿拉伯数字</strong>（较高的自由性，但是也具有挺多的限制性）；</p><p><strong>但是类似于”#“之类的具有特殊意义的符号无论作为首字母还是后续字母都会进行报错，需要注意</strong>（部分特殊文字具有一部分的冲突性，这些在之后的相关学习生活中会更加体验到某些“特殊文字”的特殊性）；</p><p><strong>不能使用关键字作为变量名或者是方法名，比如”class“”double””static”；</strong></p><p><strong>标识符是大小写敏感的</strong>（“A”开始的和“a”开始的标识符，即使后续的相关文字什么的完全相同，也会成为两种完全不同的变量名，代表着两种完全不同的变量）</p><hr><h2 id="数据类型详解"><a href="#数据类型详解" class="headerlink" title="数据类型详解"></a>数据类型详解</h2><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\数据类型\image-20210322192807259.png" alt="image-20210322192807259"></p><h3 id="基本数据类型（可看上图）"><a href="#基本数据类型（可看上图）" class="headerlink" title="基本数据类型（可看上图）"></a>基本数据类型（可看上图）</h3><p>数值类型就只能填写数值，不能写中文或者绝大多数的英语单词</p><p>字符类型几乎可以输入所有的非敏感字符，但只能以字符型输出</p><p>Boolean类型只有两种，分别是ture和false</p><p>char（’   ‘）只能输入一个字符，string(‘’   ‘’)才是字符串</p><p>IDEA这款软件比较完善，如果输入的相关数值超出了已有数据类型的相关表示范围，它会告知你应当设定哪种合适的基本数据类型，在不知道或者遗忘了数据类型的表示范围时，可以先输入一个大概的数值，然后跟着软件的指引更改选择正确的基本数据类型</p><p><em><strong>数值类型</strong></em></p><p><strong>整数类型</strong></p><p>byte占1个字节范围;-128-127</p><p>short占2个字节范围:-32768-32767</p><p>int占4个字节范围:-2147483648-2147483647</p><p>long占8个字节范围:-9223372036854775808-9223372036854775807</p><p><strong>浮点类型</strong></p><p>float占4个字节范围</p><p>double占8个字节范围</p><p><strong>字符类型</strong></p><p>char占2个字节</p><p><strong>boolean类型</strong></p><p>占一位（<strong>仅仅只有ture和false两种类型</strong>）</p><h3 id="不需要真的去记它们具体的相关储存范围，可以在IDEA中输入它们首字母大写的的数据类型名，如byte写作Byte，然后利用ctrl-鼠标点击类名进行相关的数值查看，但这种操作的基本是你必须要记住也至少要记住这8大基础类型的英文名称"><a href="#不需要真的去记它们具体的相关储存范围，可以在IDEA中输入它们首字母大写的的数据类型名，如byte写作Byte，然后利用ctrl-鼠标点击类名进行相关的数值查看，但这种操作的基本是你必须要记住也至少要记住这8大基础类型的英文名称" class="headerlink" title="不需要真的去记它们具体的相关储存范围，可以在IDEA中输入它们首字母大写的的数据类型名，如byte写作Byte，然后利用ctrl+鼠标点击类名进行相关的数值查看，但这种操作的基本是你必须要记住也至少要记住这8大基础类型的英文名称"></a>不需要真的去记它们具体的相关储存范围，可以在IDEA中输入它们首字母大写的的数据类型名，如byte写作Byte，然后利用ctrl+鼠标点击类名进行相关的数值查看，但这种操作的基本是你必须要记住也至少要记住这8大基础类型的英文名称</h3><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>类，接口，数组</p><h3 id="强类型语言与弱类型语言"><a href="#强类型语言与弱类型语言" class="headerlink" title="强类型语言与弱类型语言"></a>强类型语言与弱类型语言</h3><p><strong>强类型语言</strong>：要求变量的使用要严格符合相关的规定，所有的变量必须在定义后才可以开始使用，定义之后变量就以该类型的数据类型进行运算，前提是不进行相关的强制转换</p><p><strong>弱类型语言</strong>：某一个变量被定义为一种类型之后，该变量可以根据环境变化自动进行转换</p><hr><h2 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h2><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\数据类型\image-20210322195855977.png" alt="image-20210322195855977">1bit表示1位，<br>1Byte表示一个字节1B=8b。1024B=1KB<br>1024KB=1M1024M=1G.</p><hr><h2 id="数据类型拓展"><a href="#数据类型拓展" class="headerlink" title="数据类型拓展"></a>数据类型拓展</h2><h3 id="float相关拓展"><a href="#float相关拓展" class="headerlink" title="float相关拓展"></a>float相关拓展</h3><p>float在Java中具有极为奇妙的相关性质，<strong>它是有限，离散，接近但不等于的，所以一定要避免直接使用浮点数进行相关的比较！！！</strong></p><p>Java中有一个已经准备好了的类叫做Bigdecimal，到时候可以使用它来达到相关的比较作用</p><h3 id="char相关拓展"><a href="#char相关拓展" class="headerlink" title="char相关拓展"></a>char相关拓展</h3><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\数据类型\image-20210322201352686.png" alt="image-20210322201352686"></p><p>所有的字符本质还是数字（Unicode可以将字符转换为数字，根据相关的编码表进行输出）</p><p>‘a’=65,’A’=97;</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>\t:空格（制表符）</p><p>\n:换行</p><p>\0：空字符(NULL)</p><p>\a ：响铃(BEL) </p><p>\ddd： 任意字符 三位八进制</p><p>\xhh ：任意字符 二位十六进制</p><h3 id="if语句小知识"><a href="#if语句小知识" class="headerlink" title="if语句小知识"></a>if语句小知识</h3><p>if（flag==ture）=if（flag）</p><p>if（flag）相当于默认为判断是ture</p><hr><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>java是<strong>强类型语言</strong>，要求变量的使用要严格符合相关的规定，如果发现已经规定的数据类型无法承载相关的数字，那么就需要强制转换相关的数据类型了，<strong>但强制转换可能引起溢出或者精确度发生改变等问题</strong>（一般情况下出现在小数中）</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\数据类型\image-20210322203113982.png" alt="image-20210322203113982"></p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\数据类型\image-20210322203520195.png" alt="image-20210322203520195"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安装开发环境</title>
      <link href="/2021/12/01/Java%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/12/01/Java%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Java安装开发环境"><a href="#Java安装开发环境" class="headerlink" title="Java安装开发环境"></a>Java安装开发环境</h1><h2 id="1-java中jdk的安装"><a href="#1-java中jdk的安装" class="headerlink" title="1.java中jdk的安装"></a>1.java中jdk的安装</h2><h3 id="1-一般情况下现在都在使用jdk8-0，更高版本jdk并不是主流（不太稳定），但是也可以使用"><a href="#1-一般情况下现在都在使用jdk8-0，更高版本jdk并不是主流（不太稳定），但是也可以使用" class="headerlink" title="1.一般情况下现在都在使用jdk8.0，更高版本jdk并不是主流（不太稳定），但是也可以使用"></a>1.一般情况下现在都在使用jdk8.0，更高版本jdk并不是主流（不太稳定），但是也可以使用</h3><h3 id="2-Java-jdk的卸载教程"><a href="#2-Java-jdk的卸载教程" class="headerlink" title="2.Java jdk的卸载教程"></a>2.Java jdk的卸载教程</h3><p>1.删除Java的安装目录，可以在cmd黑窗中查找自己的jdk安装目录</p><p>2.在配置变量中删除JAVA_HOME</p><p>3.在配置变量中删除path下关于Java的目录（就看JAVA_HOME在哪里出现了，只要带了JAVA_HOME的就删除）</p><p>4.cmd输入java -version查找Java文件，如果显示未查找到相关文件，即Java环境变量完全去除成功</p><h3 id="3-jdk8-0的安装教程"><a href="#3-jdk8-0的安装教程" class="headerlink" title="3.jdk8.0的安装教程"></a>3.jdk8.0的安装教程</h3><p>1.直接在浏览器中搜索jdk8</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\jdk安装\image-20210317195919278.png" alt="image-20210317195919278"></p><p>2.在<a href="https://www.oracle.com/technet..%E4%B8%AD%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C">https://www.oracle.com/technet..中进行相关安装操作</a></p><p>​       首先找到自己电脑的适应版本，如64位电脑就下载Windows x64即可，注意一定要同意网站的二进制代码许可协议，不然无法下载jdk文件</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\jdk安装\image-20210317200136201.png" alt="image-20210317200136201"></p><p>​         双击自己电脑上的“咖啡图标”进行相关程序的安装（下图是点开之后的界面）</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\jdk安装\image-20210317201152407.png" alt="image-20210317201152407"></p><p>​         在此之后，会显示如下图所示的弹窗，并要求你确定相关的安装路径，这里不建议你将其安装在C盘中，建议你安装在D，E，F盘中。（记得安装路径，这在之后破坏重安或者卸载的时候会使用到）</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\jdk安装\image-20210317202633584.png" alt="image-20210317202633584"></p><p>​         之后开始配置环境变量</p><p>​         1.我的电脑–&gt;右键–&gt;属性–&gt;高级系统设置–&gt;环境变量</p><p>​         2.环境变量–&gt;JAVA_HOME</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\jdk安装\image-20210317203157185.png" alt="image-20210317203157185"></p><p>​         3.新建环境变量–&gt;指向安装地址（直接复制粘贴地址即可）</p><p>​          <img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\jdk安装\image-20210317203521746.png" alt="image-20210317203521746"></p><p>​        4.再打开已有环境变量（path）–&gt;引用地址%JAVA_HOME%–&gt;指向bin目录</p><p>​           打开已有环境变量（path）–&gt;引用地址%JAVA_HOME%–&gt;指向jre目录–&gt;指向bin目录</p><p><img src="C:\Users\86181\Desktop\专业学习资料即作业\java学习\java图片\jdk安装\image-20210317203842835.png" alt="image-20210317203842835"></p><p>5.在cmd中查找关于Java的相关信息（java -version），查找到Java存在即可；</p><p>​        </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/2021/12/01/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2021/12/01/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>在程序运行过程中，经常会出现一些意外的情况，这些意外会导致程序出错或者崩溃，从而影响程序的正常执行，如果不能很好地处理这些意外情况，程序的稳定性就会受到影响。在 Java 语言中，将这些程序意外称为异常（<code>Exception</code>），出现异常时的处理称为异常处理，合理的异常处理可以使整个项目更加稳定，也可以分离程序中的正常逻辑代码和异常处理逻辑代码，便于代码的阅读和维护。</p><h2 id="异常种类"><a href="#异常种类" class="headerlink" title="异常种类"></a>异常种类</h2><p><img src="C:\Users\86181\AppData\Roaming\Typora\typora-user-images\image-20211122190636235.png" alt="image-20211122190636235"></p><ul><li><p><code>Throwable</code>：异常的基类，所有异常都继承自 <code>java.lang.Throwable</code> 类，<code>Throwable</code> 类有两个直接子类：<code>Error</code> 类和 <code>Exception</code> 类。</p></li><li><p><code>Error</code>：是 Java 应用程序本身无法恢复的严重错误，应用程序不需要捕获、处理这些严重错误。通常情况下，程序员无需处理此类异常。</p></li><li><p><code>Exception</code>：由 Java 应用程序抛出和处理的非严重错误（即异常），也是我们本章重点学习的对象。异常可分为运行时异常（<code>RuntimeException</code>）和检查时异常（<code>CheckedException</code>）两种。</p></li><li><p><code>RuntimeException</code>：运行时异常，即程序运行时抛出的异常，程序员在编程时即使不做任何处理，程序也能通过编译。前面数组下标越界异常和除数为 0 的异常都是运行时异常。</p></li><li><p><code>CheckedException</code>：检查时异常，又称为非运行时异常，这样的异常要求程序员必须在编程时进行处理，否则就会编译不通过。需要特别注意的是，在 JDK 的异常定义体系中（即在所有 <code>Throwable</code> 的子类中），并不存在真正的 <code>CheckedException</code> 类。也就是说，上图中的所有类名，都能在 JDK 中找到对应的 API，但唯独 <code>CheckedException</code> 类并不是真实存在的。一般而言，如果一个类继承自 <code>RuntimeException</code>，就称此类为运行时异常；反之，如果一个类没有继承 <code>RuntimeException</code>，但继承了 <code>Exception</code> 或 <code>Throwable</code>，就称此类为检查时异常。</p></li></ul><h2 id="try-catch语句"><a href="#try-catch语句" class="headerlink" title="try catch语句"></a>try catch语句</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><ol><li>捕获异常并处理：先在一段可能抛出异常的代码外，用 <code>try{...}catch{...}</code> 结构包裹起来。如果运行时发生了异常，那么此次异常就会进入 <code>catch{...}</code> 代码块；如果一直没有异常发生，程序就不会进入 <code>catch{...}</code> 代码块。并且 <code>catch{...}</code> 可以针对抛出的不同类型的异常捕获后进行分类处理。</li><li>抛出异常：通过 <code>throws</code> 关键字，将异常抛给上一级处理。</li></ol><p>  try {    //可能抛出异常的语句块 }</p><p>  catch(SomeException1 e) {    // SomeException1 特指某些异常，非 Java 中具体异常，下同    //当捕获到 SomeException1 类型的异常时执行的语句块 }</p><p>   catch(SomeException2 e) {    //当捕获到 SomeException2 类型的异常时执行的语句块 }</p><p>   finally {    //无论是否发生异常都会执行的代码 }</p><p>  <strong>所有的catch结构都是平行结构，类似于switch语句中的case：结构，只要符合条件，无论catch在哪一级都会触发并执行相关语句</strong>所以会出现</p><h3 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a><code>finally</code> 语句</h3><p>  使用 <code>finally</code> 语句块，保证了不论 <code>try</code> 语句块中是否出现异常，<code>finally</code> 语句块中的代码都会被执行</p><p>  也许有人会有这样的疑问，如果在 <code>try</code> 语句块中或者 <code>catch</code> 语句块中存在 return 语句，<code>finally</code> 语句块中的代码还会执行吗？不是说 return 语句的作用是将结果返回给调用者，而不再执行 return 语句后面的代码吗？Java 异常处理机制对这个问题的处理是，当 <code>try</code> 或 <code>catch</code> 语句块中有 return 语句时，先执行 <code>try</code> 或 <code>catch</code> 语句块中 return 语句之前的代码，再执行 <code>finally</code> 语句块中的代码，之后再返回。所以，即使在 <code>try</code> 或 <code>catch</code> 语句块中有 return 语句，<code>finally</code> 语句块中的代码仍然会被执行。</p><p>  在异常处理结构中，<code>finally</code> 语句块<strong>不执行的唯一一种情况</strong>就是如果在 <code>catch</code> 语句中出现 <code>System.exit()</code>，该方法表示关闭 JVM。</p><h3 id="样例分析"><a href="#样例分析" class="headerlink" title="样例分析"></a>样例分析</h3><p><img src="C:\Users\86181\AppData\Roaming\Typora\typora-user-images\image-20211123194821552.png" alt="image-20211123194821552"></p><p><code>java.lang.ArrayIndexOutOfBoundsException：3</code> 表示此次发生的异常类型是 <code>ArrayIndexOutOfBoundsException</code> ，并且是在数组下标为“3”时触发的此次异常；而 <code>at TestEx12.main(TestEx12.java 8)</code> 表示此次发生异常的代码是在 <code>TestEx12</code> 类中的 <code>main()</code> 方法里（<code>TestEx12.java</code> 文件中的第 8 行）。</p><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><ul><li><p><code>NullPointerException</code>：空指针异常（程序员经常会遇到）属于运行时异常。解释为程序遇到了空指针，简单地说，就是调用了未经初始化的对象或者不存在的对象，或是访问或修改 null 对象的属性或方法。比如说，对数组操作时出现空指针，很多情况下是程序员把数组的初始化和数组元素的初始化混淆了，如果在数组元素还没有初始化的情况下调用了该数组元素，则会抛出空指针异常。</p></li><li><p><code>ClassNotFoundException</code>：见名知义，该异常为类没能找到的异常。出现这种情况一般有三种原因：一是的确不存在该类；二是开发环境进行了调整，例如类的目录结构发生了变化，编译、运行路径发生了变化等；三是在修改类名时，没有修改调用该类的其他类，导致类找不到的情况。</p></li><li><p><code>IllegalArgumentException</code>：抛出该异常表明向方法传递了一个不合法或不正确的参数。</p></li><li><p><code>InputMismatchException</code>：由 <code>Scanner</code> 抛出，表明 <code>Scanner</code> 获取的内容与期望类型的模式不匹配，或者该内容超出期望类型的范围。例如需要输入的是能转换为 <code>int</code> 型的字符串，结果却输入了 abc，则会抛出这个异常。</p></li><li><p><code>IllegalAccessException</code>：当应用程序试图创建一个实例、设置或获取一个属性，或者调用一个方法，但当前正在执行的方法无法访问指定类、属性、方法或构造方法的定义时，抛出 <code>IllegalAccessException</code>。</p></li><li><p><code>ClassCastException</code>：当试图将对象强制转换为不是实例的子类时，抛出该异常。</p></li><li><p><code>SQLException</code>：提供关于数据库访问错误或其他错误信息的异常。</p></li><li><p><code>IOException</code>：当发生某种 I/O 异常时，抛出此异常。此类是失败或中断的 I/O 操作生成的异常的通用类。</p></li></ul><h2 id="throws抛出异常"><a href="#throws抛出异常" class="headerlink" title="throws抛出异常"></a>throws抛出异常</h2><p><strong><code>throws</code> 用于声明一个方法会抛出异常，就是当方法本身不知道或者不愿意处理某个可能抛出的异常时，可以选择用 <code>throws</code> 关键字将该异常提交给调用该方法的方法进行处理</strong>。声明方法抛出异常很简单，只需要在方法的参数列表之后，在方法体的大括号前，增加 <code>throws</code> 异常列”即可。</p><p>throws抛出的异常全部都是抛给了上一级，main最后可以抛给JVM虚拟机，<strong>同时如果类似于A抛出给B，B有抛出给C时，B类中抛出的异常必须包括A中抛出的异常</strong>，当然B中抛出的异常范围也可以比A中的大，例如抛出一个exception。</p><h3 id="实用范例"><a href="#实用范例" class="headerlink" title="实用范例"></a>实用范例</h3><p><img src="C:\Users\86181\AppData\Roaming\Typora\typora-user-images\image-20211123201611875.png" alt="image-20211123201611875"></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>顾名思义，就是程序员自己定义的异常。当 Java 类库中的异常不能满足程序需求时，程序员可以自己定义并使用异常。下面结合一个实际的例子，介绍如何定义并使用自定义异常。</p><p>语法上，自定义异常可以任意的继承一个异常类。但 <strong><code>Exception</code> 类是 Java 中所有异常类的父类</strong>，<strong>所以在定义自定义异常类时，通常继承自该类。</strong></p><p><img src="C:\Users\86181\AppData\Roaming\Typora\typora-user-images\image-20211123201733022.png" alt="image-20211123201733022"></p><p><img src="C:\Users\86181\AppData\Roaming\Typora\typora-user-images\image-20211124203700298.png" alt="image-20211124203700298"></p><p><strong>message就是输出异常信息的作用，获取父类exception的相关异常信息。</strong></p><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>throw与throws并不相同，throw一般会与自定义异常一起使用，用于声明自定义异常，但重点是，<strong>使用了throw之后，必须使用try catch或者throws抛出异常（你都假设异常了，总得象征性处理一下吧）</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本章讲解的是异常处理机制，用于处理程序中可能发生的异常，主要涉及了以下知识点：</p><ol><li>异常处理机制可以将程序中的业务代码和异常代码相分离，从而使得开发者们可以更加专注于编写业务代码，并使程序更加优雅。</li><li>异常的继承结构：异常的顶层基类是 <code>Throwable</code>；继承自 <code>RuntimeException</code> 的类称为运行时异常，否则称为检查异常。</li><li>运行时异常在编译阶段没有提示，只是在运行时存在异常才抛出；而检查异常是会在编译时就提示开发者必须处理的异常。</li><li>在异常可能发生的地方，通常有两种预防性处理策略：如果开发者认为此时出现的异常最好立即进行处理，那么就可以采用 <code>try...catch</code> 的方式；反之，如果开发者认为此时出现的异常，暂时可以不进行处理，就可以通过 <code>throws</code> 将异常抛出给上一级去处理。</li><li>异常对象常用方法有两个：一个方法是 <code>printStackTrace()</code>，用于输出异常的堆栈信息；另一个方法是 <code>getMessage()</code>，用于返回异常详细信息字符串。</li><li>异常的 5 个关键字：<code>try</code> 中编写可能存在异常的代码，<code>catch</code> 用于捕获异常并书写异常处理代码，<code>finally</code> 中的代码无论是否出现异常都会被执行（此前有 <code>System.exit()</code>除外），<code>throws</code> 用于声明方法可能会抛出的异常，而 <code>throw</code> 表示手工抛出异常即制造异常并抛出。</li><li>自定义异常：如果 JDK 中已有的异常不能满足开发需求，就需要开发者自定义异常。自定义异常需要继承 JDK 中已有的异常，并且通常会结合 <code>if</code> 语句一起使用。</li><li>常见的异常类型有 <code>NullPointerException</code>、<code>ClassNotFoundException</code>、<code>IllegalArgumentException</code>、<code>InputMismatchException</code>、<code>IllegalAccessException</code>、<code>ClassCastException</code>、<code>SQLException</code> 和 <code>IOException</code> 等，并且随着学习的深入，大家也会接触更多类型的异常。</li></ol><p><img src="https://doc.shiyanlou.com/courses/3232/1533757/6a157196929fd350a385f0fd20a17dbf-0" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
